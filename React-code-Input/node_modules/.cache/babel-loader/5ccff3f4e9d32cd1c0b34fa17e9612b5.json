{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hassa\\\\Documents\\\\GitHub\\\\SlotMachineReact\\\\slothmachine\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newPlayerContent: '',\n      exists: null\n    };\n    this.writePlayer = this.writePlayer.bind(this);\n    this.checkIfUserExists = this.checkIfUserExists.bind(this);\n  }\n\n  checkIfUserExists(newPlayerContent) {\n    var playersRef = firebase.database().ref();\n    playersRef.child('players').orderByChild(\"playerContent\").equalTo(newPlayerContent).once(\"value\", snapshot => {\n      const userData = snapshot.val();\n\n      if (userData) {\n        console.log(\"exists!\");\n        this.state.duplicate = true;\n        console.log(this.state.duplicate);\n      } else {\n        console.log(\"does not exist.\");\n        this.state.duplicate = false;\n        console.log(this.state.duplicate);\n      }\n    });\n    writePlayer();\n\n    if (this.state.duplicate !== true) {\n      this.props.addPlayer(this.state.newPlayerContent);\n      this.setState({\n        newPlayerContent: ''\n      });\n    } else {\n      console.log(\"This player already exists.\");\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault(); //removes default behaviors like reloading on pressing submit.\n\n    const inputcode1Ref = firebase.database().ref('inputcode1');\n    inputcode1Ref.equalTo('SlothCode').once(\"value\", snapshot => {\n      const userData = snapshot.val();\n\n      if (userData) {\n        console.log(\"exists!\");\n        this.state.duplicate = true;\n        console.log(this.state.duplicate);\n      } else {\n        console.log(\"does not exist.\");\n        this.state.duplicate = false;\n        console.log(this.state.duplicate);\n      }\n    });\n    const item = {\n      SlothCode: this.state.currentItem\n    };\n    inputcode1Ref.set(item);\n    this.setState({\n      currentItem: '',\n      SlothCode: ''\n    });\n  }\n\n  componentDidMount() {\n    const inputcode1Ref = firebase.database().ref('inputcode1');\n    inputcode1Ref.on('value', snapshot => {\n      let inputcode1 = snapshot.val();\n      let newState = [];\n\n      for (let item in inputcode1) {\n        newState.push({\n          id: item,\n          SlothCode: inputcode1[item].SlothCode\n        });\n      }\n\n      this.setState({\n        inputcode1: newState\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Codes \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 9\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"add-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"currentItem\",\n            placeholder: \"Enter Code\",\n            onChange: this.handleChange,\n            value: this.state.currentItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 9\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleSubmit,\n            children: \" Enter Code \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 12\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"display-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\" \", this.state.inputcode1.map(item => {\n                return /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \" your code has been sent \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 22\n                }, this);\n              }), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 9\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 9\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 19\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 18\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hassa/Documents/GitHub/SlotMachineReact/slothmachine/src/App.js"],"names":["React","Component","Button","firebase","App","constructor","props","state","newPlayerContent","exists","writePlayer","bind","checkIfUserExists","playersRef","database","ref","child","orderByChild","equalTo","once","snapshot","userData","val","console","log","duplicate","addPlayer","setState","handleSubmit","e","preventDefault","inputcode1Ref","item","SlothCode","currentItem","set","componentDidMount","on","inputcode1","newState","push","id","render","handleChange","map"],"mappings":"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","sourcesContent":["import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css'\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport firebase from './firebase.js'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newPlayerContent: '',\r\n      exists: null\r\n    };\r\n\r\n    this.writePlayer = this.writePlayer.bind(this);\r\n    this.checkIfUserExists = this.checkIfUserExists.bind(this);\r\n  }\r\n\r\n\r\n  checkIfUserExists(newPlayerContent) {\r\n    var playersRef = firebase.database().ref();\r\n    playersRef.child('players').orderByChild(\"playerContent\").equalTo(newPlayerContent).once(\"value\", snapshot => {\r\n      const userData = snapshot.val();\r\n      if (userData) {\r\n        console.log(\"exists!\");\r\n\r\n        this.state.duplicate = true;\r\n\r\n        console.log(this.state.duplicate)\r\n      } else {\r\n        console.log(\"does not exist.\")\r\n        this.state.duplicate = false;\r\n        console.log(this.state.duplicate)\r\n      }\r\n    });\r\n\r\n    writePlayer() ;\r\n      if (this.state.duplicate !== true) {\r\n        this.props.addPlayer(this.state.newPlayerContent);\r\n        this.setState({\r\n          newPlayerContent: '',\r\n        })\r\n      } else {\r\n        console.log(\"This player already exists.\")\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit(e) {\r\n      e.preventDefault(); //removes default behaviors like reloading on pressing submit.\r\n\r\n      const inputcode1Ref = firebase.database().ref('inputcode1');\r\n      inputcode1Ref.equalTo('SlothCode').once(\"value\", snapshot => {\r\n        const userData = snapshot.val();\r\n        if (userData) {\r\n          console.log(\"exists!\");\r\n\r\n          this.state.duplicate = true;\r\n\r\n          console.log(this.state.duplicate)\r\n        } else {\r\n          console.log(\"does not exist.\")\r\n          this.state.duplicate = false;\r\n          console.log(this.state.duplicate)\r\n        }\r\n      });\r\n      const item = {\r\n        SlothCode: this.state.currentItem\r\n      }\r\n      inputcode1Ref.set(item);\r\n      this.setState({\r\n        currentItem: '',\r\n        SlothCode: ''\r\n      });\r\n    }\r\n    componentDidMount() {\r\n      const inputcode1Ref = firebase.database().ref('inputcode1');\r\n      inputcode1Ref.on('value', (snapshot) => {\r\n        let inputcode1 = snapshot.val();\r\n        let newState = [];\r\n        for (let item in inputcode1) {\r\n          newState.push({\r\n            id: item,\r\n            SlothCode: inputcode1[item].SlothCode\r\n          });\r\n        }\r\n        this.setState({\r\n          inputcode1: newState\r\n        });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return ( <\r\n        div className = 'app' >\r\n        <\r\n        header >\r\n        <\r\n        div className = \"wrapper\" >\r\n        <\r\n        h1 > Codes < /h1> <\r\n        /div> <\r\n        /header> <\r\n        div className = 'container' >\r\n        <\r\n        section className = 'add-item' >\r\n        <\r\n        input type = \"text\"\r\n        name = \"currentItem\"\r\n        placeholder = \"Enter Code\"\r\n        onChange = {\r\n          this.handleChange\r\n        }\r\n        value = {\r\n          this.state.currentItem\r\n        }\r\n        /> <\r\n        Button onClick = {\r\n          this.handleSubmit\r\n        } > Enter Code < /Button> <\r\n        /section> <\r\n        section className = 'display-item' >\r\n        <\r\n        div className = \"wrapper\" >\r\n        <\r\n        ul > {\r\n          this.state.inputcode1.map((item) => {\r\n            return ( <\r\n              h1 > your code has been sent < /h1>\r\n\r\n            )\r\n          })\r\n        } <\r\n        /ul> <\r\n        /div> <\r\n        /section> <\r\n        /div> <\r\n        /div>\r\n      );\r\n    }\r\n  }\r\n  export default App;\r\n"]},"metadata":{},"sourceType":"module"}