{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hassa\\\\Documents\\\\GitHub\\\\SlotMachineReact\\\\slothmachine\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: [],\n      SlothCode: '',\n      inputcode1: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault(); //removes default behaviors like reloading on pressing submit.\n\n    const codesRef = firebase.database().ref();\n    const inputcode1Ref = firebase.database().ref(\"inputcode1\");\n    inputcode1Ref.set({\n      SlothCode: e.target.value\n    }).then(function () {\n      codesRef.once(\"value\").then(function (snapshot) {\n        if (snapshot.child(\"inputcode1/SlothCode\").val() === snapshot.child(\"inputcode2/SlothCode1\").val()) {\n          console.log(\"same!\");\n          firebase.database().ref(\"Payment\").push({\n            Paid: true\n          });\n        } else {\n          console.log(\"does not exist.\");\n        }\n      });\n    }); //const inputcode1Ref = firebase.database().ref('inputcode1');\n    //inputcode1Ref.child('inputcode1').orderByChild(\"SlothCode\").equalTo(this.state.SlothCode).once(\"value\",snapshot => {\n    //      const userData = snapshot.val();\n    //\n    //  });\n    //  const item = {\n    //    SlothCode: this.state.currentItem\n    //  }\n    //    inputcode1Ref.set(item);\n    //  this.setState({\n    //    currentItem: '',\n    //    SlothCode: ''\n  } //  componentDidMount() {\n  //    const inputcode1Ref = firebase.database().ref('inputcode1');\n  //    inputcode1Ref.on('value', (snapshot) => {\n  //      let inputcode1 = snapshot.val();\n  //      let newState = [];\n  //      for (let item in inputcode1) {\n  //        newState.push({\n  //          id: item,\n  //          SlothCode: inputcode1[item].SlothCode\n  //        });\n  //      }\n  //      this.setState({\n  //        inputcode1: newState\n  //      });\n  //    });\n  //  }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Codes \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"add-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"currentItem\",\n            placeholder: \"Enter Code\",\n            onChange: this.handleChange,\n            value: this.state.currentItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 7\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleSubmit,\n            value: this.state.currentItem,\n            children: \" Enter Code \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 10\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"display-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\" \", this.state.inputcode1.map(item => {\n                return /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \" your code has been sent \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 20\n                }, this);\n              }), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 7\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 7\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hassa/Documents/GitHub/SlotMachineReact/slothmachine/src/App.js"],"names":["React","Component","Button","firebase","App","constructor","state","currentItem","SlothCode","inputcode1","handleChange","bind","handleSubmit","e","setState","target","name","value","preventDefault","codesRef","database","ref","inputcode1Ref","set","then","once","snapshot","child","val","console","log","push","Paid","render","map","item"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,SADF,QAEO,OAFP;AAGA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,sCAAP;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,EADF;AAEXC,MAAAA,SAAS,EAAE,EAFA;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AACDD,EAAAA,YAAY,CAACG,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AACZ,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AADd,KAAd;AAGD;;AAKDL,EAAAA,YAAY,CAACC,CAAD,EAAI;AACdA,IAAAA,CAAC,CAACK,cAAF,GADc,CACM;;AACpB,UAAMC,QAAQ,GAAGhB,QAAQ,CAACiB,QAAT,GAAoBC,GAApB,EAAjB;AACA,UAAMC,aAAa,GAAGnB,QAAQ,CAACiB,QAAT,GAAoBC,GAApB,CAAwB,YAAxB,CAAtB;AACAC,IAAAA,aAAa,CAACC,GAAd,CAAkB;AAChBf,MAAAA,SAAS,EAAEK,CAAC,CAACE,MAAF,CAASE;AADJ,KAAlB,EAEGO,IAFH,CAEQ,YAAW;AACjBL,MAAAA,QAAQ,CAACM,IAAT,CAAc,OAAd,EACGD,IADH,CACQ,UAASE,QAAT,EAAmB;AAEvB,YAAIA,QAAQ,CAACC,KAAT,CAAe,sBAAf,EAAuCC,GAAvC,OAAiDF,QAAQ,CAACC,KAAT,CAAe,uBAAf,EAAwCC,GAAxC,EAArD,EAAoG;AAClGC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA3B,UAAAA,QAAQ,CAACiB,QAAT,GAAoBC,GAApB,CAAwB,SAAxB,EAAmCU,IAAnC,CAAwC;AAACC,YAAAA,IAAI,EAAC;AAAN,WAAxC;AACD,SAHD,MAGO;AACLH,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;AACF,OATH;AAWD,KAdD,EAJc,CAmBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GApDyB,CAqD1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,EAAAA,MAAM,GAAG;AACP,wBAAS;AACH,MAAA,SAAS,EAAG,KADT;AAAA,8BAEP;AAAA,gCAEA;AACI,UAAA,SAAS,EAAG,SADhB;AAAA,kCAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFO,oBASE;AACL,QAAA,SAAS,EAAG,WADP;AAAA,gCAET;AACQ,UAAA,SAAS,EAAG,UADpB;AAAA,kCAEA;AACM,YAAA,IAAI,EAAG,MADb;AAEA,YAAA,IAAI,EAAG,aAFP;AAGA,YAAA,WAAW,EAAG,YAHd;AAIA,YAAA,QAAQ,EACN,KAAKvB,YALP;AAOA,YAAA,KAAK,EACH,KAAKJ,KAAL,CAAWC;AARb;AAAA;AAAA;AAAA;AAAA,kBAFA,oBAYG,QACH,MADG;AACI,YAAA,OAAO,EACZ,KAAKK,YAFJ;AAIH,YAAA,KAAK,EACH,KAAKN,KAAL,CAAWC,WALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFS,oBAqBC;AACF,UAAA,SAAS,EAAG,cADV;AAAA,kCAEV;AACI,YAAA,SAAS,EAAG,SADhB;AAAA,oCAEA;AAAA,8BAEE,KAAKD,KAAL,CAAWG,UAAX,CAAsByB,GAAtB,CAA2BC,IAAD,IAAU;AAClC,oCAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAT;AAID,eALD,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFU;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBD;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AAiDD;;AAxHyB;;AA0H5B,eAAe/B,GAAf","sourcesContent":["import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css'\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport firebase from './firebase.js'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentItem: [],\r\n      SlothCode: '',\r\n      inputcode1: []\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault(); //removes default behaviors like reloading on pressing submit.\r\n    const codesRef = firebase.database().ref();\r\n    const inputcode1Ref = firebase.database().ref(\"inputcode1\");\r\n    inputcode1Ref.set({\r\n      SlothCode: e.target.value\r\n    }).then(function() {\r\n      codesRef.once(\"value\")\r\n        .then(function(snapshot) {\r\n\r\n          if (snapshot.child(\"inputcode1/SlothCode\").val() === snapshot.child(\"inputcode2/SlothCode1\").val()) {\r\n            console.log(\"same!\");\r\n            firebase.database().ref(\"Payment\").push({Paid:true});\r\n          } else {\r\n            console.log(\"does not exist.\")\r\n          }\r\n        })\r\n\r\n    });\r\n    //const inputcode1Ref = firebase.database().ref('inputcode1');\r\n    //inputcode1Ref.child('inputcode1').orderByChild(\"SlothCode\").equalTo(this.state.SlothCode).once(\"value\",snapshot => {\r\n    //      const userData = snapshot.val();\r\n    //\r\n    //  });\r\n    //  const item = {\r\n    //    SlothCode: this.state.currentItem\r\n    //  }\r\n    //    inputcode1Ref.set(item);\r\n    //  this.setState({\r\n    //    currentItem: '',\r\n    //    SlothCode: ''\r\n\r\n  }\r\n  //  componentDidMount() {\r\n  //    const inputcode1Ref = firebase.database().ref('inputcode1');\r\n  //    inputcode1Ref.on('value', (snapshot) => {\r\n  //      let inputcode1 = snapshot.val();\r\n  //      let newState = [];\r\n  //      for (let item in inputcode1) {\r\n  //        newState.push({\r\n  //          id: item,\r\n  //          SlothCode: inputcode1[item].SlothCode\r\n  //        });\r\n  //      }\r\n  //      this.setState({\r\n  //        inputcode1: newState\r\n  //      });\r\n  //    });\r\n  //  }\r\n\r\n  render() {\r\n    return ( <\r\n      div className = 'app' >\r\n      <\r\n      header >\r\n      <\r\n      div className = \"wrapper\" >\r\n      <\r\n      h1 > Codes < /h1> < /\r\n      div > <\r\n      /header> <\r\n      div className = 'container' >\r\n      <\r\n      section className = 'add-item' >\r\n      <\r\n      input type = \"text\"\r\n      name = \"currentItem\"\r\n      placeholder = \"Enter Code\"\r\n      onChange = {\r\n        this.handleChange\r\n      }\r\n      value = {\r\n        this.state.currentItem\r\n      }\r\n      /> <\r\n      Button onClick = {\r\n        this.handleSubmit\r\n      }\r\n      value = {\r\n        this.state.currentItem\r\n      } > Enter Code < /Button> < /\r\n      section > <\r\n      section className = 'display-item' >\r\n      <\r\n      div className = \"wrapper\" >\r\n      <\r\n      ul > {\r\n        this.state.inputcode1.map((item) => {\r\n          return ( <\r\n            h1 > your code has been sent < /h1>\r\n\r\n          )\r\n        })\r\n      } <\r\n      /ul> < /\r\n      div > <\r\n      /section> < /\r\n      div > <\r\n      /div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}