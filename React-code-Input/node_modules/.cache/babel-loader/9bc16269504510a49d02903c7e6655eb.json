{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hassa\\\\Documents\\\\GitHub\\\\SlotMachineReact\\\\slothmachine\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: [],\n      SlothCode: '',\n      inputcode1: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault(); //removes default behaviors like reloading on pressing submit.\n\n    const codesRef = firebase.database().ref();\n    const inputcode1Ref = firebase.database().ref(\"inputcode1\");\n    codesRef.once(\"value\").then(function (snapshot) {\n      inputcode1Ref.set({\n        SlothCode: this.state.currentItem\n      });\n\n      if (snapshot.child(\"inputcode1/SlothCode\").val() === snapshot.child(\"inputcode2/SlothCode1\").val()) {\n        console.log(\"same!\");\n      } else {\n        console.log(\"does not exist.\");\n      }\n    }); //const inputcode1Ref = firebase.database().ref('inputcode1');\n    //inputcode1Ref.child('inputcode1').orderByChild(\"SlothCode\").equalTo(this.state.SlothCode).once(\"value\",snapshot => {\n    //      const userData = snapshot.val();\n    //\n    //  });\n    //  const item = {\n    //    SlothCode: this.state.currentItem\n    //  }\n    //    inputcode1Ref.set(item);\n    //  this.setState({\n    //    currentItem: '',\n    //    SlothCode: ''\n  } //  componentDidMount() {\n  //    const inputcode1Ref = firebase.database().ref('inputcode1');\n  //    inputcode1Ref.on('value', (snapshot) => {\n  //      let inputcode1 = snapshot.val();\n  //      let newState = [];\n  //      for (let item in inputcode1) {\n  //        newState.push({\n  //          id: item,\n  //          SlothCode: inputcode1[item].SlothCode\n  //        });\n  //      }\n  //      this.setState({\n  //        inputcode1: newState\n  //      });\n  //    });\n  //  }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Codes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"add-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"currentItem\",\n            placeholder: \"Enter Code\",\n            onChange: this.handleChange,\n            value: this.state.currentItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleSubmit,\n            children: \"Enter Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"display-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: this.state.inputcode1.map(item => {\n                return /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"your code has been sent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hassa/Documents/GitHub/SlotMachineReact/slothmachine/src/App.js"],"names":["React","Component","Button","firebase","App","constructor","state","currentItem","SlothCode","inputcode1","handleChange","bind","handleSubmit","e","setState","target","name","value","preventDefault","codesRef","database","ref","inputcode1Ref","once","then","snapshot","set","child","val","console","log","render","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport firebase from './firebase.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: [],\n      SlothCode: '',\n      inputcode1: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n\n\n\n  handleSubmit(e) {\n    e.preventDefault(); //removes default behaviors like reloading on pressing submit.\n    const codesRef = firebase.database().ref();\n    const inputcode1Ref = firebase.database().ref(\"inputcode1\");\n    codesRef.once(\"value\")\n      .then(function(snapshot) {\n        inputcode1Ref.set({SlothCode:this.state.currentItem})\n        if (snapshot.child(\"inputcode1/SlothCode\").val() === snapshot.child(\"inputcode2/SlothCode1\").val()){\n             console.log(\"same!\");\n           }\n             else{\n               console.log(\"does not exist.\")\n             }\n      });\n    //const inputcode1Ref = firebase.database().ref('inputcode1');\n    //inputcode1Ref.child('inputcode1').orderByChild(\"SlothCode\").equalTo(this.state.SlothCode).once(\"value\",snapshot => {\n  //      const userData = snapshot.val();\n  //\n  //  });\n  //  const item = {\n  //    SlothCode: this.state.currentItem\n  //  }\n//    inputcode1Ref.set(item);\n  //  this.setState({\n  //    currentItem: '',\n  //    SlothCode: ''\n\n  }\n//  componentDidMount() {\n//    const inputcode1Ref = firebase.database().ref('inputcode1');\n//    inputcode1Ref.on('value', (snapshot) => {\n//      let inputcode1 = snapshot.val();\n//      let newState = [];\n//      for (let item in inputcode1) {\n//        newState.push({\n//          id: item,\n//          SlothCode: inputcode1[item].SlothCode\n//        });\n//      }\n//      this.setState({\n//        inputcode1: newState\n//      });\n//    });\n//  }\n\n  render() {\n    return (\n      <div className='app'>\n        <header>\n            <div className=\"wrapper\">\n              <h1>Codes</h1>\n            </div>\n        </header>\n        <div className='container'>\n          <section className='add-item'>\n                  <input type=\"text\" name=\"currentItem\" placeholder=\"Enter Code\" onChange={this.handleChange} value={this.state.currentItem} />\n                <Button onClick={this.handleSubmit}>Enter Code</Button>\n          </section>\n          <section className='display-item'>\n              <div className=\"wrapper\">\n                <ul>\n                  {this.state.inputcode1.map((item) => {\n                    return (\n                      <h1>your code has been sent</h1>\n\n                    )\n                  })}\n                </ul>\n              </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}